{"ast":null,"code":"import { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_FAIL, ORDER_PAY_SUCCESS, ORDER_PAY_RESET, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_MY_RESET, ORDER_LIST_FAIL, ORDER_LIST_SUCCESS, ORDER_LIST_REQUEST, ORDER_DELIVER_FAIL, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_REQUEST, ORDER_DELIVER_RESET, ORDER_CREATE_RESET } from '../constants/orderConstants';\n/**\r\n * This is a reducer function that handles the state changes for creating an order in a JavaScript\r\n * application.\r\n * @param [state] - The initial state of the reducer. If no state is provided, it defaults to an empty\r\n * object.\r\n * @param action - The `action` parameter in this reducer function represents the action object that is\r\n * dispatched by the application. It contains information about the action type and any payload data\r\n * that is associated with the action. The reducer function uses this information to update the state\r\n * of the application accordingly.\r\n * @returns The orderCreateReducer function returns an object that represents the state of the order\r\n * creation process. The initial state is an empty object. The function uses a switch statement to\r\n * handle different action types. If the action type is ORDER_CREATE_REQUEST, it returns an object with\r\n * a loading property set to true. If the action type is ORDER_CREATE_SUCCESS, it returns an object\r\n * with loading set to false, success set\r\n */\n\nexport const orderCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_CREATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case ORDER_CREATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        order: action.payload\n      };\n\n    case ORDER_CREATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case ORDER_CREATE_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles the state changes for fetching and displaying order details.\r\n * @param [state] - The initial state of the order details, which includes a loading property set to\r\n * true, an empty array for order items, and an empty object for shipping address.\r\n * @param action - The `action` parameter in this code refers to an object that contains information\r\n * about the action being dispatched. It typically has a `type` property that describes the type of\r\n * action being performed, and may also have additional data or payload that is relevant to the action.\r\n * The reducer uses this information to determine\r\n * @returns The `orderDetailsReducer` function is returning an object with three properties: `loading`,\r\n * `orderItems`, and `shippingAddress`. The initial value of `loading` is set to `true`. The function\r\n * uses a switch statement to determine which action to perform based on the `action.type` value. If\r\n * the action type is `ORDER_DETAILS_REQUEST`, the function returns a new object with the `\r\n */\n\nexport const orderDetailsReducer = (state = {\n  loading: true,\n  orderItems: [],\n  shippingAddress: {}\n}, action) => {\n  switch (action.type) {\n    case ORDER_DETAILS_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case ORDER_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        order: action.payload\n      };\n\n    case ORDER_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles the state changes for payment related actions in an order.\r\n * @param [state] - The initial state of the reducer, which is an empty object by default.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of action and any additional data needed to update the state. The\r\n * reducer uses this information to determine how to update the state based on the action type.\r\n * @returns The `orderPayReducer` function returns an object that represents the new state of the\r\n * application based on the action that was dispatched. The object has different properties depending\r\n * on the action type:\r\n */\n\nexport const orderPayReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_PAY_REQUEST:\n      return {\n        loading: true\n      };\n\n    case ORDER_PAY_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n\n    case ORDER_PAY_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case ORDER_PAY_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles the state changes for delivering an order, including\r\n * loading, success, and error states.\r\n * @param [state] - The current state of the order deliver reducer. If no state is provided, it\r\n * defaults to an empty object.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of action and any additional data (payload) that may be needed to\r\n * update the state. The reducer function uses this information to determine how to update the state\r\n * based on the action type.\r\n * @returns The orderDeliverReducer function returns an object with different properties based on the\r\n * action type received. If the action type is ORDER_DELIVER_REQUEST, it returns an object with a\r\n * loading property set to true. If the action type is ORDER_DELIVER_SUCCESS, it returns an object with\r\n * a loading property set to false and a success property set to true. If the action type is\r\n * ORDER_DELIVER_FAIL,\r\n */\n\nexport const orderDeliverReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_DELIVER_REQUEST:\n      return {\n        loading: true\n      };\n\n    case ORDER_DELIVER_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n\n    case ORDER_DELIVER_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case ORDER_DELIVER_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles the state of a user's order list in a web application.\r\n * @param [state] - The current state of the order list, which is an object containing an array of\r\n * orders by default.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of the action and any payload data associated with it. The reducer\r\n * uses this information to determine how to update the state.\r\n * @returns The `orderListMyReducer` function returns an object with a `loading` property set to `true`\r\n * when the `ORDER_LIST_MY_REQUEST` action type is dispatched. It returns an object with a `loading`\r\n * property set to `false` and an `orders` property set to the `action.payload` when the\r\n * `ORDER_LIST_MY_SUCCESS` action type is dispatched. It returns an object\r\n */\n\nexport const orderListMyReducer = (state = {\n  orders: []\n}, action) => {\n  switch (action.type) {\n    case ORDER_LIST_MY_REQUEST:\n      return {\n        loading: true\n      };\n\n    case ORDER_LIST_MY_SUCCESS:\n      return {\n        loading: false,\n        orders: action.payload\n      };\n\n    case ORDER_LIST_MY_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case ORDER_LIST_MY_RESET:\n      return {\n        orders: []\n      };\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles actions related to fetching a list of orders, and updates\r\n * the state accordingly.\r\n * @param [state] - The initial state of the orderListReducer, which is an object with a property\r\n * \"orders\" set to an empty array.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of the action and any additional data needed to update the state. The\r\n * reducer uses this information to determine how to update the state.\r\n * @returns The `orderListReducer` function returns an object with a `loading` property set to `true`\r\n * when the `ORDER_LIST_REQUEST` action is dispatched, an object with a `loading` property set to\r\n * `false` and an `orders` property set to the `action.payload` when the `ORDER_LIST_SUCCESS` action is\r\n * dispatched, an object with a `loading` property set to `\r\n */\n\nexport const orderListReducer = (state = {\n  orders: []\n}, action) => {\n  switch (action.type) {\n    case ORDER_LIST_REQUEST:\n      return {\n        loading: true\n      };\n\n    case ORDER_LIST_SUCCESS:\n      return {\n        loading: false,\n        orders: action.payload\n      };\n\n    case ORDER_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/test/Major_Mern-Stack_Project/frontend/src/reducers/orderReducers.js"],"names":["ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_FAIL","ORDER_PAY_SUCCESS","ORDER_PAY_RESET","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_MY_FAIL","ORDER_LIST_MY_RESET","ORDER_LIST_FAIL","ORDER_LIST_SUCCESS","ORDER_LIST_REQUEST","ORDER_DELIVER_FAIL","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_REQUEST","ORDER_DELIVER_RESET","ORDER_CREATE_RESET","orderCreateReducer","state","action","type","loading","success","order","payload","error","orderDetailsReducer","orderItems","shippingAddress","orderPayReducer","orderDeliverReducer","orderListMyReducer","orders","orderListReducer"],"mappings":"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","sourcesContent":["import {\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_DETAILS_REQUEST,\r\n  ORDER_DETAILS_SUCCESS,\r\n  ORDER_DETAILS_FAIL,\r\n  ORDER_PAY_REQUEST,\r\n  ORDER_PAY_FAIL,\r\n  ORDER_PAY_SUCCESS,\r\n  ORDER_PAY_RESET,\r\n  ORDER_LIST_MY_REQUEST,\r\n  ORDER_LIST_MY_SUCCESS,\r\n  ORDER_LIST_MY_FAIL,\r\n  ORDER_LIST_MY_RESET,\r\n  ORDER_LIST_FAIL,\r\n  ORDER_LIST_SUCCESS,\r\n  ORDER_LIST_REQUEST,\r\n  ORDER_DELIVER_FAIL,\r\n  ORDER_DELIVER_SUCCESS,\r\n  ORDER_DELIVER_REQUEST,\r\n  ORDER_DELIVER_RESET,\r\n  ORDER_CREATE_RESET,\r\n} from '../constants/orderConstants'\r\n\r\n/**\r\n * This is a reducer function that handles the state changes for creating an order in a JavaScript\r\n * application.\r\n * @param [state] - The initial state of the reducer. If no state is provided, it defaults to an empty\r\n * object.\r\n * @param action - The `action` parameter in this reducer function represents the action object that is\r\n * dispatched by the application. It contains information about the action type and any payload data\r\n * that is associated with the action. The reducer function uses this information to update the state\r\n * of the application accordingly.\r\n * @returns The orderCreateReducer function returns an object that represents the state of the order\r\n * creation process. The initial state is an empty object. The function uses a switch statement to\r\n * handle different action types. If the action type is ORDER_CREATE_REQUEST, it returns an object with\r\n * a loading property set to true. If the action type is ORDER_CREATE_SUCCESS, it returns an object\r\n * with loading set to false, success set\r\n */\r\nexport const orderCreateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_CREATE_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_CREATE_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        success: true,\r\n        order: action.payload,\r\n      }\r\n    case ORDER_CREATE_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_CREATE_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles the state changes for fetching and displaying order details.\r\n * @param [state] - The initial state of the order details, which includes a loading property set to\r\n * true, an empty array for order items, and an empty object for shipping address.\r\n * @param action - The `action` parameter in this code refers to an object that contains information\r\n * about the action being dispatched. It typically has a `type` property that describes the type of\r\n * action being performed, and may also have additional data or payload that is relevant to the action.\r\n * The reducer uses this information to determine\r\n * @returns The `orderDetailsReducer` function is returning an object with three properties: `loading`,\r\n * `orderItems`, and `shippingAddress`. The initial value of `loading` is set to `true`. The function\r\n * uses a switch statement to determine which action to perform based on the `action.type` value. If\r\n * the action type is `ORDER_DETAILS_REQUEST`, the function returns a new object with the `\r\n */\r\nexport const orderDetailsReducer = (\r\n  state = { loading: true, orderItems: [], shippingAddress: {} },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ORDER_DETAILS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case ORDER_DETAILS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        order: action.payload,\r\n      }\r\n    case ORDER_DETAILS_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles the state changes for payment related actions in an order.\r\n * @param [state] - The initial state of the reducer, which is an empty object by default.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of action and any additional data needed to update the state. The\r\n * reducer uses this information to determine how to update the state based on the action type.\r\n * @returns The `orderPayReducer` function returns an object that represents the new state of the\r\n * application based on the action that was dispatched. The object has different properties depending\r\n * on the action type:\r\n */\r\nexport const orderPayReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_PAY_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_PAY_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_PAY_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_PAY_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles the state changes for delivering an order, including\r\n * loading, success, and error states.\r\n * @param [state] - The current state of the order deliver reducer. If no state is provided, it\r\n * defaults to an empty object.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of action and any additional data (payload) that may be needed to\r\n * update the state. The reducer function uses this information to determine how to update the state\r\n * based on the action type.\r\n * @returns The orderDeliverReducer function returns an object with different properties based on the\r\n * action type received. If the action type is ORDER_DELIVER_REQUEST, it returns an object with a\r\n * loading property set to true. If the action type is ORDER_DELIVER_SUCCESS, it returns an object with\r\n * a loading property set to false and a success property set to true. If the action type is\r\n * ORDER_DELIVER_FAIL,\r\n */\r\nexport const orderDeliverReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_DELIVER_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_DELIVER_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_DELIVER_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_DELIVER_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles the state of a user's order list in a web application.\r\n * @param [state] - The current state of the order list, which is an object containing an array of\r\n * orders by default.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of the action and any payload data associated with it. The reducer\r\n * uses this information to determine how to update the state.\r\n * @returns The `orderListMyReducer` function returns an object with a `loading` property set to `true`\r\n * when the `ORDER_LIST_MY_REQUEST` action type is dispatched. It returns an object with a `loading`\r\n * property set to `false` and an `orders` property set to the `action.payload` when the\r\n * `ORDER_LIST_MY_SUCCESS` action type is dispatched. It returns an object\r\n */\r\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\r\n  switch (action.type) {\r\n    case ORDER_LIST_MY_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_LIST_MY_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        orders: action.payload,\r\n      }\r\n    case ORDER_LIST_MY_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_LIST_MY_RESET:\r\n      return { orders: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles actions related to fetching a list of orders, and updates\r\n * the state accordingly.\r\n * @param [state] - The initial state of the orderListReducer, which is an object with a property\r\n * \"orders\" set to an empty array.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of the action and any additional data needed to update the state. The\r\n * reducer uses this information to determine how to update the state.\r\n * @returns The `orderListReducer` function returns an object with a `loading` property set to `true`\r\n * when the `ORDER_LIST_REQUEST` action is dispatched, an object with a `loading` property set to\r\n * `false` and an `orders` property set to the `action.payload` when the `ORDER_LIST_SUCCESS` action is\r\n * dispatched, an object with a `loading` property set to `\r\n */\r\nexport const orderListReducer = (state = { orders: [] }, action) => {\r\n  switch (action.type) {\r\n    case ORDER_LIST_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_LIST_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        orders: action.payload,\r\n      }\r\n    case ORDER_LIST_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}