{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_CREATE_RESET, PRODUCT_CREATE_FAIL, PRODUCT_CREATE_SUCCESS, PRODUCT_CREATE_REQUEST, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_UPDATE_RESET, PRODUCT_CREATE_REVIEW_REQUEST, PRODUCT_CREATE_REVIEW_SUCCESS, PRODUCT_CREATE_REVIEW_FAIL, PRODUCT_CREATE_REVIEW_RESET, PRODUCT_TOP_REQUEST, PRODUCT_TOP_SUCCESS, PRODUCT_TOP_FAIL } from '../constants/productConstants';\n/**\r\n * This is a reducer function that handles actions related to fetching a list of products, and updates\r\n * the state accordingly.\r\n * @param [state] - The current state of the productListReducer. If no state is provided, the default\r\n * state is an object with an empty array for the products key.\r\n * @param action - The `action` parameter is an object that contains information about the action being\r\n * dispatched. It has a `type` property that indicates the type of action being performed, and may also\r\n * have a `payload` property that contains additional data related to the action. The `action`\r\n * parameter is passed to the\r\n * @returns The productListReducer function is returning an object with properties based on the action\r\n * type. If the action type is PRODUCT_LIST_REQUEST, it returns an object with a loading property set\r\n * to true and an empty products array. If the action type is PRODUCT_LIST_SUCCESS, it returns an\r\n * object with a loading property set to false, a products property set to the action payload's\r\n * products array, a pages property set to\r\n */\n\nexport const productListReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    case PRODUCT_LIST_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload.products,\n        pages: action.payload.pages,\n        page: action.payload.page\n      };\n\n    case PRODUCT_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles actions related to fetching and updating product details in\r\n * a Redux store.\r\n * @param [state] - The current state of the product details, which includes the product object and its\r\n * reviews array.\r\n * @param action - The `action` parameter in this reducer function represents the action object that is\r\n * dispatched to update the state. It contains a `type` property that specifies the type of action\r\n * being performed and an optional `payload` property that contains any data associated with the\r\n * action. The reducer function uses the `type`\r\n * @returns The `productDetailsReducer` function returns an object with properties `loading`,\r\n * `product`, and `error`. The initial state of the `state` parameter is an object with a `product`\r\n * property that has an empty array for the `reviews` property. The function uses a switch statement to\r\n * determine which action type was dispatched and returns a new state object based on the action type.\r\n * If the action\r\n */\n\nexport const productDetailsReducer = (state = {\n  product: {\n    reviews: []\n  }\n}, action) => {\n  switch (action.type) {\n    case PRODUCT_DETAILS_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case PRODUCT_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        product: action.payload\n      };\n\n    case PRODUCT_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles the state changes for deleting a product, including loading,\r\n * success, and error states.\r\n * @param [state] - The initial state of the reducer, which is an empty object in this case.\r\n * @param action - The `action` parameter is an object that contains information about the action being\r\n * dispatched. It has a `type` property that specifies the type of action being performed, and may also\r\n * have a `payload` property that contains additional data related to the action. The reducer function\r\n * uses this information to update the\r\n * @returns The `productDeleteReducer` function returns an object with different properties based on\r\n * the action type received. If the action type is `PRODUCT_DELETE_REQUEST`, it returns an object with\r\n * `loading` set to `true`. If the action type is `PRODUCT_DELETE_SUCCESS`, it returns an object with\r\n * `loading` set to `false` and `success` set to `true`. If the action type is\r\n */\n\nexport const productDeleteReducer = (state = {}, action) => {\n  switch (action.type) {\n    case PRODUCT_DELETE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case PRODUCT_DELETE_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n\n    case PRODUCT_DELETE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles the state changes for creating a product, including loading,\r\n * success, failure, and resetting the state.\r\n * @param [state] - The initial state of the reducer, which is an empty object in this case.\r\n * @param action - The `action` parameter is an object that contains information about the action being\r\n * dispatched. It has a `type` property that indicates the type of action being performed, and may also\r\n * have a `payload` property that contains additional data related to the action. The reducer function\r\n * uses this information to update the\r\n * @returns The `productCreateReducer` function returns an object that represents the state of the\r\n * product creation process. The initial state is an empty object `{}`. The function uses a switch\r\n * statement to handle different action types. If the action type is `PRODUCT_CREATE_REQUEST`, it\r\n * returns an object with `loading` set to `true`. If the action type is `PRODUCT_CREATE_SUCCESS`, it\r\n * returns an object with\r\n */\n\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case PRODUCT_CREATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case PRODUCT_CREATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        product: action.payload\n      };\n\n    case PRODUCT_CREATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case PRODUCT_CREATE_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\n/**\r\n * This is a reducer function that handles state updates for product updates in a Redux store.\r\n * @param [state] - The initial state of the reducer, which is an object with a property called\r\n * \"product\" set to an empty object.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of the action and any payload data associated with it. The reducer\r\n * uses this information to determine how to update the state.\r\n * @returns The `productUpdateReducer` function returns an object with different properties based on\r\n * the action type received. If the action type is `PRODUCT_UPDATE_REQUEST`, it returns an object with\r\n * `loading` set to `true`. If the action type is `PRODUCT_UPDATE_SUCCESS`, it returns an object with\r\n * `loading` set to `false`, `success` set to `true`, and `product` set to\r\n */\n\nexport const productUpdateReducer = (state = {\n  product: {}\n}, action) => {\n  switch (action.type) {\n    case PRODUCT_UPDATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case PRODUCT_UPDATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        product: action.payload\n      };\n\n    case PRODUCT_UPDATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case PRODUCT_UPDATE_RESET:\n      return {\n        product: {}\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productReviewCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case PRODUCT_CREATE_REVIEW_REQUEST:\n      return {\n        loading: true\n      };\n\n    case PRODUCT_CREATE_REVIEW_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n\n    case PRODUCT_CREATE_REVIEW_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case PRODUCT_CREATE_REVIEW_RESET:\n      return {};\n\n    default:\n      return state;\n  }\n};\nexport const productTopRatedReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    case PRODUCT_TOP_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n\n    case PRODUCT_TOP_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload\n      };\n\n    case PRODUCT_TOP_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/test/Major_Mern-Stack_Project/frontend/src/reducers/productReducers.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_CREATE_RESET","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_REQUEST","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_UPDATE_RESET","PRODUCT_CREATE_REVIEW_REQUEST","PRODUCT_CREATE_REVIEW_SUCCESS","PRODUCT_CREATE_REVIEW_FAIL","PRODUCT_CREATE_REVIEW_RESET","PRODUCT_TOP_REQUEST","PRODUCT_TOP_SUCCESS","PRODUCT_TOP_FAIL","productListReducer","state","products","action","type","loading","payload","pages","page","error","productDetailsReducer","product","reviews","productDeleteReducer","success","productCreateReducer","productUpdateReducer","productReviewCreateReducer","productTopRatedReducer"],"mappings":"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","sourcesContent":["import {\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  PRODUCT_DETAILS_REQUEST,\r\n  PRODUCT_DETAILS_SUCCESS,\r\n  PRODUCT_DETAILS_FAIL,\r\n  PRODUCT_DELETE_REQUEST,\r\n  PRODUCT_DELETE_SUCCESS,\r\n  PRODUCT_DELETE_FAIL,\r\n  PRODUCT_CREATE_RESET,\r\n  PRODUCT_CREATE_FAIL,\r\n  PRODUCT_CREATE_SUCCESS,\r\n  PRODUCT_CREATE_REQUEST,\r\n  PRODUCT_UPDATE_REQUEST,\r\n  PRODUCT_UPDATE_SUCCESS,\r\n  PRODUCT_UPDATE_FAIL,\r\n  PRODUCT_UPDATE_RESET,\r\n  PRODUCT_CREATE_REVIEW_REQUEST,\r\n  PRODUCT_CREATE_REVIEW_SUCCESS,\r\n  PRODUCT_CREATE_REVIEW_FAIL,\r\n  PRODUCT_CREATE_REVIEW_RESET,\r\n  PRODUCT_TOP_REQUEST,\r\n  PRODUCT_TOP_SUCCESS,\r\n  PRODUCT_TOP_FAIL,\r\n} from '../constants/productConstants'\r\n\r\n/**\r\n * This is a reducer function that handles actions related to fetching a list of products, and updates\r\n * the state accordingly.\r\n * @param [state] - The current state of the productListReducer. If no state is provided, the default\r\n * state is an object with an empty array for the products key.\r\n * @param action - The `action` parameter is an object that contains information about the action being\r\n * dispatched. It has a `type` property that indicates the type of action being performed, and may also\r\n * have a `payload` property that contains additional data related to the action. The `action`\r\n * parameter is passed to the\r\n * @returns The productListReducer function is returning an object with properties based on the action\r\n * type. If the action type is PRODUCT_LIST_REQUEST, it returns an object with a loading property set\r\n * to true and an empty products array. If the action type is PRODUCT_LIST_SUCCESS, it returns an\r\n * object with a loading property set to false, a products property set to the action payload's\r\n * products array, a pages property set to\r\n */\r\nexport const productListReducer = (state = { products: [] }, action) => {\r\n  switch (action.type) {\r\n    case PRODUCT_LIST_REQUEST:\r\n      return { loading: true, products: [] }\r\n    case PRODUCT_LIST_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        products: action.payload.products,\r\n        pages: action.payload.pages,\r\n        page: action.payload.page,\r\n      }\r\n    case PRODUCT_LIST_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles actions related to fetching and updating product details in\r\n * a Redux store.\r\n * @param [state] - The current state of the product details, which includes the product object and its\r\n * reviews array.\r\n * @param action - The `action` parameter in this reducer function represents the action object that is\r\n * dispatched to update the state. It contains a `type` property that specifies the type of action\r\n * being performed and an optional `payload` property that contains any data associated with the\r\n * action. The reducer function uses the `type`\r\n * @returns The `productDetailsReducer` function returns an object with properties `loading`,\r\n * `product`, and `error`. The initial state of the `state` parameter is an object with a `product`\r\n * property that has an empty array for the `reviews` property. The function uses a switch statement to\r\n * determine which action type was dispatched and returns a new state object based on the action type.\r\n * If the action\r\n */\r\nexport const productDetailsReducer = (\r\n  state = { product: { reviews: [] } },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case PRODUCT_DETAILS_REQUEST:\r\n      return { ...state, loading: true }\r\n    case PRODUCT_DETAILS_SUCCESS:\r\n      return { loading: false, product: action.payload }\r\n    case PRODUCT_DETAILS_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles the state changes for deleting a product, including loading,\r\n * success, and error states.\r\n * @param [state] - The initial state of the reducer, which is an empty object in this case.\r\n * @param action - The `action` parameter is an object that contains information about the action being\r\n * dispatched. It has a `type` property that specifies the type of action being performed, and may also\r\n * have a `payload` property that contains additional data related to the action. The reducer function\r\n * uses this information to update the\r\n * @returns The `productDeleteReducer` function returns an object with different properties based on\r\n * the action type received. If the action type is `PRODUCT_DELETE_REQUEST`, it returns an object with\r\n * `loading` set to `true`. If the action type is `PRODUCT_DELETE_SUCCESS`, it returns an object with\r\n * `loading` set to `false` and `success` set to `true`. If the action type is\r\n */\r\nexport const productDeleteReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case PRODUCT_DELETE_REQUEST:\r\n      return { loading: true }\r\n    case PRODUCT_DELETE_SUCCESS:\r\n      return { loading: false, success: true }\r\n    case PRODUCT_DELETE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles the state changes for creating a product, including loading,\r\n * success, failure, and resetting the state.\r\n * @param [state] - The initial state of the reducer, which is an empty object in this case.\r\n * @param action - The `action` parameter is an object that contains information about the action being\r\n * dispatched. It has a `type` property that indicates the type of action being performed, and may also\r\n * have a `payload` property that contains additional data related to the action. The reducer function\r\n * uses this information to update the\r\n * @returns The `productCreateReducer` function returns an object that represents the state of the\r\n * product creation process. The initial state is an empty object `{}`. The function uses a switch\r\n * statement to handle different action types. If the action type is `PRODUCT_CREATE_REQUEST`, it\r\n * returns an object with `loading` set to `true`. If the action type is `PRODUCT_CREATE_SUCCESS`, it\r\n * returns an object with\r\n */\r\nexport const productCreateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case PRODUCT_CREATE_REQUEST:\r\n      return { loading: true }\r\n    case PRODUCT_CREATE_SUCCESS:\r\n      return { loading: false, success: true, product: action.payload }\r\n    case PRODUCT_CREATE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case PRODUCT_CREATE_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * This is a reducer function that handles state updates for product updates in a Redux store.\r\n * @param [state] - The initial state of the reducer, which is an object with a property called\r\n * \"product\" set to an empty object.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of the action and any payload data associated with it. The reducer\r\n * uses this information to determine how to update the state.\r\n * @returns The `productUpdateReducer` function returns an object with different properties based on\r\n * the action type received. If the action type is `PRODUCT_UPDATE_REQUEST`, it returns an object with\r\n * `loading` set to `true`. If the action type is `PRODUCT_UPDATE_SUCCESS`, it returns an object with\r\n * `loading` set to `false`, `success` set to `true`, and `product` set to\r\n */\r\nexport const productUpdateReducer = (state = { product: {} }, action) => {\r\n  switch (action.type) {\r\n    case PRODUCT_UPDATE_REQUEST:\r\n      return { loading: true }\r\n    case PRODUCT_UPDATE_SUCCESS:\r\n      return { loading: false, success: true, product: action.payload }\r\n    case PRODUCT_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case PRODUCT_UPDATE_RESET:\r\n      return { product: {} }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const productReviewCreateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case PRODUCT_CREATE_REVIEW_REQUEST:\r\n      return { loading: true }\r\n    case PRODUCT_CREATE_REVIEW_SUCCESS:\r\n      return { loading: false, success: true }\r\n    case PRODUCT_CREATE_REVIEW_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case PRODUCT_CREATE_REVIEW_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const productTopRatedReducer = (state = { products: [] }, action) => {\r\n  switch (action.type) {\r\n    case PRODUCT_TOP_REQUEST:\r\n      return { loading: true, products: [] }\r\n    case PRODUCT_TOP_SUCCESS:\r\n      return { loading: false, products: action.payload }\r\n    case PRODUCT_TOP_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}