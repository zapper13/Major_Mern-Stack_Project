{"ast":null,"code":"import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from '../constants/cartConstants';\nconst url = \"https://mernecommerce2.onrender.com\";\n/**\r\n * This function adds a product to the cart and saves the cart items to local storage.\r\n * @param id - The ID of the product being added to the cart.\r\n * @param qty - qty stands for quantity, which is the number of items the user wants to add to their\r\n * cart.\r\n */\n\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\n  const {\n    data\n  } = await axios.get(`${url}/api/products/${id}`);\n  dispatch({\n    type: CART_ADD_ITEM,\n    payload: {\n      product: data._id,\n      name: data.name,\n      image: data.image,\n      price: data.price,\n      countInStock: data.countInStock,\n      qty\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\n/**\r\n * This function removes an item from the cart and updates the cart items in local storage.\r\n * @param id - The id parameter is the unique identifier of the item that needs to be removed from the\r\n * cart.\r\n */\n\nexport const removeFromCart = id => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: id\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\n/**\r\n * This function saves the shipping address data to the Redux store and local storage.\r\n * @param data - The data parameter is an object that contains the shipping address information such as\r\n * the recipient's name, address, city, state, and zip code.\r\n */\n\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n  localStorage.setItem('paymentMethod', JSON.stringify(data));\n};","map":{"version":3,"sources":["D:/test/Major_Mern-Stack_Project/frontend/src/actions/cartActions.js"],"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","url","addToCart","id","qty","dispatch","getState","data","get","type","payload","product","_id","name","image","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","removeFromCart","saveShippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,0BAHF,EAIEC,wBAJF,QAKO,4BALP;AAOA,MAAMC,GAAG,GAAG,qCAAZ;AAEA;;;;;;;AAMA,OAAO,MAAMC,SAAS,GAAG,CAACC,EAAD,EAAKC,GAAL,KAAa,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,KAAK,CAACY,GAAN,CAAW,GAAEP,GAAI,iBAAgBE,EAAG,EAApC,CAAvB;AAEAE,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEZ,aADC;AAEPa,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAEJ,IAAI,CAACK,GADP;AAEPC,MAAAA,IAAI,EAAEN,IAAI,CAACM,IAFJ;AAGPC,MAAAA,KAAK,EAAEP,IAAI,CAACO,KAHL;AAIPC,MAAAA,KAAK,EAAER,IAAI,CAACQ,KAJL;AAKPC,MAAAA,YAAY,EAAET,IAAI,CAACS,YALZ;AAMPZ,MAAAA;AANO;AAFF,GAAD,CAAR;AAYAa,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC;AACD,CAhBM;AAkBP;;;;;;AAKA,OAAO,MAAMC,cAAc,GAAIpB,EAAD,IAAQ,CAACE,QAAD,EAAWC,QAAX,KAAwB;AAC5DD,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEX,gBADC;AAEPY,IAAAA,OAAO,EAAEP;AAFF,GAAD,CAAR;AAKAc,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC;AACD,CAPM;AASP;;;;;;AAKA,OAAO,MAAME,mBAAmB,GAAIjB,IAAD,IAAWF,QAAD,IAAc;AACzDA,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEV,0BADC;AAEPW,IAAAA,OAAO,EAAEH;AAFF,GAAD,CAAR;AAKAU,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAxC;AACD,CAPM;AASP,OAAO,MAAMkB,iBAAiB,GAAIlB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAET,wBADC;AAEPU,IAAAA,OAAO,EAAEH;AAFF,GAAD,CAAR;AAKAU,EAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAtC;AACD,CAPM","sourcesContent":["import axios from 'axios'\r\nimport {\r\n  CART_ADD_ITEM,\r\n  CART_REMOVE_ITEM,\r\n  CART_SAVE_SHIPPING_ADDRESS,\r\n  CART_SAVE_PAYMENT_METHOD,\r\n} from '../constants/cartConstants'\r\n\r\nconst url = \"https://mernecommerce2.onrender.com\";\r\n\r\n/**\r\n * This function adds a product to the cart and saves the cart items to local storage.\r\n * @param id - The ID of the product being added to the cart.\r\n * @param qty - qty stands for quantity, which is the number of items the user wants to add to their\r\n * cart.\r\n */\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n  const { data } = await axios.get(`${url}/api/products/${id}`)\r\n\r\n  dispatch({\r\n    type: CART_ADD_ITEM,\r\n    payload: {\r\n      product: data._id,\r\n      name: data.name,\r\n      image: data.image,\r\n      price: data.price,\r\n      countInStock: data.countInStock,\r\n      qty,\r\n    },\r\n  })\r\n\r\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\n/**\r\n * This function removes an item from the cart and updates the cart items in local storage.\r\n * @param id - The id parameter is the unique identifier of the item that needs to be removed from the\r\n * cart.\r\n */\r\nexport const removeFromCart = (id) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: CART_REMOVE_ITEM,\r\n    payload: id,\r\n  })\r\n\r\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\n/**\r\n * This function saves the shipping address data to the Redux store and local storage.\r\n * @param data - The data parameter is an object that contains the shipping address information such as\r\n * the recipient's name, address, city, state, and zip code.\r\n */\r\nexport const saveShippingAddress = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: CART_SAVE_SHIPPING_ADDRESS,\r\n    payload: data,\r\n  })\r\n\r\n  localStorage.setItem('shippingAddress', JSON.stringify(data))\r\n}\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: CART_SAVE_PAYMENT_METHOD,\r\n    payload: data,\r\n  })\r\n\r\n  localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}