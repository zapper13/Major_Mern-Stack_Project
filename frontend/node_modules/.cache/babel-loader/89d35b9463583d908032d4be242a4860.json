{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD, CART_CLEAR_ITEMS } from '../constants/cartConstants';\n/**\r\n * This is a reducer function that handles actions related to a shopping cart, including adding and\r\n * removing items, saving shipping address and payment method, and clearing the cart.\r\n * @param [state] - The initial state of the cart, which includes an empty array for cartItems and an\r\n * empty object for shippingAddress.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of action and any additional data (payload) needed to update the\r\n * state.\r\n * @returns The cartReducer function is returning a new state object based on the action type received.\r\n * If the action type is CART_ADD_ITEM, it checks if the item already exists in the cartItems array and\r\n * either updates the quantity or adds a new item. If the action type is CART_REMOVE_ITEM, it removes\r\n * the item from the cartItems array. If the action type is CART_SAVE_SHIPPING_ADDRESS, it\r\n */\n\nexport const cartReducer = (state = {\n  cartItems: [],\n  shippingAddress: {}\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      const existItem = state.cartItems.find(x => x.product === item.product);\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    case CART_SAVE_PAYMENT_METHOD:\n      return { ...state,\n        paymentMethod: action.payload\n      };\n\n    case CART_CLEAR_ITEMS:\n      return { ...state,\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/test/Major_Mern-Stack_Project/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_CLEAR_ITEMS","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","existItem","find","x","product","map","filter","paymentMethod"],"mappings":"AAAA,SACEA,aADF,EAEEC,gBAFF,EAGEC,0BAHF,EAIEC,wBAJF,EAKEC,gBALF,QAMO,4BANP;AAQA;;;;;;;;;;;;;;AAaA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAiBC,EAAAA,eAAe,EAAE;AAAlC,CADiB,EAEzBC,MAFyB,KAGtB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAL;AACE,YAAMW,IAAI,GAAGF,MAAM,CAACG,OAApB;AAEA,YAAMC,SAAS,GAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA/C,CAAlB;;AAEA,UAAIH,SAAJ,EAAe;AACb,eAAO,EACL,GAAGP,KADE;AAELC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAqBF,CAAD,IAC7BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CADhC;AAFN,SAAP;AAMD,OAPD,MAOO;AACL,eAAO,EACL,GAAGT,KADE;AAELC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBI,IAArB;AAFN,SAAP;AAID;;AACH,SAAKV,gBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELC,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAwBH,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OAAnD;AAFN,OAAP;;AAIF,SAAKV,0BAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELE,QAAAA,eAAe,EAAEC,MAAM,CAACG;AAFnB,OAAP;;AAIF,SAAKT,wBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELa,QAAAA,aAAa,EAAEV,MAAM,CAACG;AAFjB,OAAP;;AAIF,SAAKR,gBAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELC,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF;AACE,aAAOD,KAAP;AAxCJ;AA0CD,CA9CM","sourcesContent":["import {\r\n  CART_ADD_ITEM,\r\n  CART_REMOVE_ITEM,\r\n  CART_SAVE_SHIPPING_ADDRESS,\r\n  CART_SAVE_PAYMENT_METHOD,\r\n  CART_CLEAR_ITEMS,\r\n} from '../constants/cartConstants'\r\n\r\n/**\r\n * This is a reducer function that handles actions related to a shopping cart, including adding and\r\n * removing items, saving shipping address and payment method, and clearing the cart.\r\n * @param [state] - The initial state of the cart, which includes an empty array for cartItems and an\r\n * empty object for shippingAddress.\r\n * @param action - The action parameter is an object that contains information about the action being\r\n * dispatched, including the type of action and any additional data (payload) needed to update the\r\n * state.\r\n * @returns The cartReducer function is returning a new state object based on the action type received.\r\n * If the action type is CART_ADD_ITEM, it checks if the item already exists in the cartItems array and\r\n * either updates the quantity or adds a new item. If the action type is CART_REMOVE_ITEM, it removes\r\n * the item from the cartItems array. If the action type is CART_SAVE_SHIPPING_ADDRESS, it\r\n */\r\nexport const cartReducer = (\r\n  state = { cartItems: [], shippingAddress: {} },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case CART_ADD_ITEM:\r\n      const item = action.payload\r\n\r\n      const existItem = state.cartItems.find((x) => x.product === item.product)\r\n\r\n      if (existItem) {\r\n        return {\r\n          ...state,\r\n          cartItems: state.cartItems.map((x) =>\r\n            x.product === existItem.product ? item : x\r\n          ),\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          cartItems: [...state.cartItems, item],\r\n        }\r\n      }\r\n    case CART_REMOVE_ITEM:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.filter((x) => x.product !== action.payload),\r\n      }\r\n    case CART_SAVE_SHIPPING_ADDRESS:\r\n      return {\r\n        ...state,\r\n        shippingAddress: action.payload,\r\n      }\r\n    case CART_SAVE_PAYMENT_METHOD:\r\n      return {\r\n        ...state,\r\n        paymentMethod: action.payload,\r\n      }\r\n    case CART_CLEAR_ITEMS:\r\n      return {\r\n        ...state,\r\n        cartItems: [],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}